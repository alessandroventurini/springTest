[{"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\index.js":"1","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\App.js":"2","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\reportWebVitals.js":"3","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Main.js":"4","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Login.js":"5","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Nav.js":"6","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Form.js":"7","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Home.js":"8"},{"size":517,"mtime":1610620048851,"results":"9","hashOfConfig":"10"},{"size":290,"mtime":1610620154467,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1608310187362,"results":"12","hashOfConfig":"10"},{"size":543,"mtime":1610665162328,"results":"13","hashOfConfig":"10"},{"size":2567,"mtime":1610665197136,"results":"14","hashOfConfig":"10"},{"size":1049,"mtime":1610665801842,"results":"15","hashOfConfig":"10"},{"size":2458,"mtime":1610636913649,"results":"16","hashOfConfig":"10"},{"size":4171,"mtime":1610665546132,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"2z2rw3",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\index.js",[],["39","40"],"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\App.js",[],"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\reportWebVitals.js",[],"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Main.js",["41"],"import React from 'react';\r\nimport {Switch, Route, BrowserRouter} from 'react-router-dom';\r\nimport Login from \"./Login\";\r\nimport Nav from \"./Nav\";\r\nimport Home from './Home'\r\n\r\n\r\n\r\nconst Main = () =>(\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path='/login' component={Login}/>\r\n            <Route exact path='/error' render={(props) => <Login error={\"Wrong Username or password\"} {...props}/>} />\r\n            <Route exact path='/' component={Home}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\n\r\n\r\nexport default Main;","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Login.js",["42"],"import React, {Component} from 'react';\r\nimport Form from \"./Form\";\r\nimport Nav from \"./Nav\";\r\n\r\n\r\nclass Login extends Component{\r\n\r\n    state = {\r\n        username: '',\r\n        password:'',\r\n        error: ''\r\n    }\r\n\r\n    onChange = (key,value) =>{\r\n        this.setState({[key]:value});\r\n    }\r\n    componentDidMount() {\r\n        debugger;\r\n        if(this.props.error){\r\n            this.showError();\r\n        }\r\n    }\r\n\r\n    showError = (err) => {\r\n        this.onChange('error',err);\r\n        document.getElementById('alert').className = 'alert alert-warning alert-dismissible fade show';\r\n    }\r\n\r\n    signIn = (event) =>{\r\n        debugger;\r\n        event.preventDefault();\r\n        const data = new FormData(this.form);\r\n        fetch(this.form.action, {\r\n            method: this.form.method,\r\n            body: new URLSearchParams(data)\r\n        })\r\n            .then(v =>{\r\n                debugger;\r\n                console.log(v.redirected + \" \" + v.url);\r\n                if(v.redirected) {\r\n                        window.location = v.url;\r\n                }\r\n            })\r\n            .catch(e => console.error(e))\r\n\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Nav type={\"login\"}/>\r\n                <div className='container center_div'>\r\n                    <h1>LOGIN</h1>\r\n                    <form onSubmit={this.signIn} action={\"/perform_login\"} ref={fm => {this.form=fm}} method={\"POST\"}>\r\n                        <div className='input-group mb-3'>\r\n                            <span className=\"input-group-text\">Username</span>\r\n                            <input type=\"text\" className='form-control' name=\"username\" placeholder={'Username'} onChange={event => this.onChange('username',event.target.value)}/>\r\n                        </div>\r\n                        <div className=\"input-group mb-3\">\r\n                            <span className=\"input-group-text\">Password</span>\r\n                            <input type=\"password\" className='form-control' name=\"password\" placeholder={'password'} onChange={event => this.onChange('password',event.target.value)}/>\r\n                        </div>\r\n                        <div className=\"alert alert-warning alert-dismissible fade close\" role=\"alert\" id={'alert'}>\r\n                            {this.props.error}\r\n                        </div>\r\n                        <button type=\"submit\" className='btn btn-dark'>LOGIN</button>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Login","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Nav.js",["43"],"import React, {Component} from 'react';\r\nimport '../css/Nav.css'\r\n\r\nclass Nav extends Component{\r\n\r\n\r\n    logout = () =>{\r\n        console.log(\"ciao\");\r\n        fetch(\"/perform_logout\")\r\n            .then(v =>{\r\n                debugger;\r\n                console.log(v.redirected + \" \" + v.url);\r\n                if(v.redirected) {\r\n                    window.location = v.url;\r\n                }\r\n            })\r\n            .catch(e => console.error(e))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <a className=\"navbar-brand brand\" href=\"/\">TEST SPRING</a>\r\n                    <div className=\"nav navbar-right logout\">\r\n                        {this.props.type == \"logged\" && (\r\n                            <button className=\"btn btn-outline-light\" onClick={this.logout}>LOGOUT</button>\r\n                        )}\r\n                    </div>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Nav;","D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Form.js",[],"D:\\Workspace_corretto\\provaReactSpring\\spring-test\\frontend\\src\\components\\Home.js",["44"],"import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nimport Nav from \"./Nav\";\r\n\r\n\r\nclass Home extends Component{\r\n\r\n    state = {\r\n        posts: '',\r\n        comments: [],\r\n        userId: '',\r\n        id : ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        debugger;\r\n        axios\r\n            .get('/getUser')\r\n            .then((response) =>{\r\n                debugger;\r\n                console.log(response.data);\r\n                this.setState({userId: response.data.username})\r\n                this.setState({id: response.data.id})\r\n            })\r\n            .catch((error)=>{\r\n                debugger;\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    onChange = (key,value) =>{\r\n        this.setState({[key]:value});\r\n    }\r\n\r\n    getRestResponse = (service,type) =>{\r\n        debugger;\r\n        this.clearView(type);\r\n        axios\r\n            .get(service.concat(this.state.id))\r\n            .then((response) =>{\r\n                debugger;\r\n                console.log(response.data);\r\n                this.onChange(type,response.data);\r\n            })\r\n            .catch((error)=>{\r\n                debugger;\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    clearView = (type) =>{\r\n        if(type == \"comments\"){\r\n            this.setState({posts: ''})\r\n        }\r\n        else{\r\n            this.setState({comments: []})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <Nav type={\"logged\"}/>\r\n                <div className='api_call'>\r\n                    <h1>POST & COMMENTI di {this.state.userId.toUpperCase()}</h1>\r\n                    <table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <td>\r\n                                    <button className='btn btn-dark' onClick={() => this.getRestResponse(\"/getPosts/\",\"posts\")}>Get Posts</button>\r\n                                </td>\r\n                                <td>\r\n                                    <button className='btn btn-dark' onClick={() => this.getRestResponse(\"/getComments/\",\"comments\")}>Get Comments</button>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            {\r\n                                this.state.posts && (\r\n                                    <td>\r\n                                        <div className=\"card border-dark  mb-3 customCard\">\r\n                                            <div className=\"card-body text-dark\">\r\n                                                <h5 className=\"card-title\">{this.state.posts.title}</h5>\r\n                                                <p className=\"card-text\">{this.state.posts.body}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                        <tr>\r\n                            {\r\n                                this.state.comments.map((comment) =>(\r\n                                    <td>\r\n                                        <div className=\"card border-secondary mb-3 customCard\">\r\n                                            <div className=\"card-header\">{comment.email}</div>\r\n                                            <div className=\"card-body text-secondary\">\r\n                                                <h5 className=\"card-title\">{comment.name}</h5>\r\n                                                <p className=\"card-text\">{comment.body}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                ))\r\n                            }\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home;",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":11},{"ruleId":"49","severity":1,"message":"53","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":12},{"ruleId":"54","severity":1,"message":"55","line":26,"column":42,"nodeType":"56","messageId":"57","endLine":26,"endColumn":44},{"ruleId":"54","severity":1,"message":"55","line":52,"column":17,"nodeType":"56","messageId":"57","endLine":52,"endColumn":19},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Nav' is defined but never used.","Identifier","unusedVar","'Form' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]